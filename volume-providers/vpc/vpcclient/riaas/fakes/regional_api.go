// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/IBM/ibmcloud-storage-volume-lib/volume-providers/vpc/vpcclient/instances"
	"github.com/IBM/ibmcloud-storage-volume-lib/volume-providers/vpc/vpcclient/riaas"
	"github.com/IBM/ibmcloud-storage-volume-lib/volume-providers/vpc/vpcclient/vpcvolume"
)

type RegionalAPI struct {
	IKSVolumeAttachServiceStub        func() instances.VolumeAttachManager
	iKSVolumeAttachServiceMutex       sync.RWMutex
	iKSVolumeAttachServiceArgsForCall []struct {
	}
	iKSVolumeAttachServiceReturns struct {
		result1 instances.VolumeAttachManager
	}
	iKSVolumeAttachServiceReturnsOnCall map[int]struct {
		result1 instances.VolumeAttachManager
	}
	LoginStub        func(string) error
	loginMutex       sync.RWMutex
	loginArgsForCall []struct {
		arg1 string
	}
	loginReturns struct {
		result1 error
	}
	loginReturnsOnCall map[int]struct {
		result1 error
	}
	SnapshotServiceStub        func() vpcvolume.SnapshotManager
	snapshotServiceMutex       sync.RWMutex
	snapshotServiceArgsForCall []struct {
	}
	snapshotServiceReturns struct {
		result1 vpcvolume.SnapshotManager
	}
	snapshotServiceReturnsOnCall map[int]struct {
		result1 vpcvolume.SnapshotManager
	}
	VolumeAttachServiceStub        func() instances.VolumeAttachManager
	volumeAttachServiceMutex       sync.RWMutex
	volumeAttachServiceArgsForCall []struct {
	}
	volumeAttachServiceReturns struct {
		result1 instances.VolumeAttachManager
	}
	volumeAttachServiceReturnsOnCall map[int]struct {
		result1 instances.VolumeAttachManager
	}
	VolumeServiceStub        func() vpcvolume.VolumeManager
	volumeServiceMutex       sync.RWMutex
	volumeServiceArgsForCall []struct {
	}
	volumeServiceReturns struct {
		result1 vpcvolume.VolumeManager
	}
	volumeServiceReturnsOnCall map[int]struct {
		result1 vpcvolume.VolumeManager
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *RegionalAPI) IKSVolumeAttachService() instances.VolumeAttachManager {
	fake.iKSVolumeAttachServiceMutex.Lock()
	ret, specificReturn := fake.iKSVolumeAttachServiceReturnsOnCall[len(fake.iKSVolumeAttachServiceArgsForCall)]
	fake.iKSVolumeAttachServiceArgsForCall = append(fake.iKSVolumeAttachServiceArgsForCall, struct {
	}{})
	fake.recordInvocation("IKSVolumeAttachService", []interface{}{})
	fake.iKSVolumeAttachServiceMutex.Unlock()
	if fake.IKSVolumeAttachServiceStub != nil {
		return fake.IKSVolumeAttachServiceStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.iKSVolumeAttachServiceReturns
	return fakeReturns.result1
}

func (fake *RegionalAPI) IKSVolumeAttachServiceCallCount() int {
	fake.iKSVolumeAttachServiceMutex.RLock()
	defer fake.iKSVolumeAttachServiceMutex.RUnlock()
	return len(fake.iKSVolumeAttachServiceArgsForCall)
}

func (fake *RegionalAPI) IKSVolumeAttachServiceCalls(stub func() instances.VolumeAttachManager) {
	fake.iKSVolumeAttachServiceMutex.Lock()
	defer fake.iKSVolumeAttachServiceMutex.Unlock()
	fake.IKSVolumeAttachServiceStub = stub
}

func (fake *RegionalAPI) IKSVolumeAttachServiceReturns(result1 instances.VolumeAttachManager) {
	fake.iKSVolumeAttachServiceMutex.Lock()
	defer fake.iKSVolumeAttachServiceMutex.Unlock()
	fake.IKSVolumeAttachServiceStub = nil
	fake.iKSVolumeAttachServiceReturns = struct {
		result1 instances.VolumeAttachManager
	}{result1}
}

func (fake *RegionalAPI) IKSVolumeAttachServiceReturnsOnCall(i int, result1 instances.VolumeAttachManager) {
	fake.iKSVolumeAttachServiceMutex.Lock()
	defer fake.iKSVolumeAttachServiceMutex.Unlock()
	fake.IKSVolumeAttachServiceStub = nil
	if fake.iKSVolumeAttachServiceReturnsOnCall == nil {
		fake.iKSVolumeAttachServiceReturnsOnCall = make(map[int]struct {
			result1 instances.VolumeAttachManager
		})
	}
	fake.iKSVolumeAttachServiceReturnsOnCall[i] = struct {
		result1 instances.VolumeAttachManager
	}{result1}
}

func (fake *RegionalAPI) Login(arg1 string) error {
	fake.loginMutex.Lock()
	ret, specificReturn := fake.loginReturnsOnCall[len(fake.loginArgsForCall)]
	fake.loginArgsForCall = append(fake.loginArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Login", []interface{}{arg1})
	fake.loginMutex.Unlock()
	if fake.LoginStub != nil {
		return fake.LoginStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.loginReturns
	return fakeReturns.result1
}

func (fake *RegionalAPI) LoginCallCount() int {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	return len(fake.loginArgsForCall)
}

func (fake *RegionalAPI) LoginCalls(stub func(string) error) {
	fake.loginMutex.Lock()
	defer fake.loginMutex.Unlock()
	fake.LoginStub = stub
}

func (fake *RegionalAPI) LoginArgsForCall(i int) string {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	argsForCall := fake.loginArgsForCall[i]
	return argsForCall.arg1
}

func (fake *RegionalAPI) LoginReturns(result1 error) {
	fake.loginMutex.Lock()
	defer fake.loginMutex.Unlock()
	fake.LoginStub = nil
	fake.loginReturns = struct {
		result1 error
	}{result1}
}

func (fake *RegionalAPI) LoginReturnsOnCall(i int, result1 error) {
	fake.loginMutex.Lock()
	defer fake.loginMutex.Unlock()
	fake.LoginStub = nil
	if fake.loginReturnsOnCall == nil {
		fake.loginReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.loginReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *RegionalAPI) SnapshotService() vpcvolume.SnapshotManager {
	fake.snapshotServiceMutex.Lock()
	ret, specificReturn := fake.snapshotServiceReturnsOnCall[len(fake.snapshotServiceArgsForCall)]
	fake.snapshotServiceArgsForCall = append(fake.snapshotServiceArgsForCall, struct {
	}{})
	fake.recordInvocation("SnapshotService", []interface{}{})
	fake.snapshotServiceMutex.Unlock()
	if fake.SnapshotServiceStub != nil {
		return fake.SnapshotServiceStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.snapshotServiceReturns
	return fakeReturns.result1
}

func (fake *RegionalAPI) SnapshotServiceCallCount() int {
	fake.snapshotServiceMutex.RLock()
	defer fake.snapshotServiceMutex.RUnlock()
	return len(fake.snapshotServiceArgsForCall)
}

func (fake *RegionalAPI) SnapshotServiceCalls(stub func() vpcvolume.SnapshotManager) {
	fake.snapshotServiceMutex.Lock()
	defer fake.snapshotServiceMutex.Unlock()
	fake.SnapshotServiceStub = stub
}

func (fake *RegionalAPI) SnapshotServiceReturns(result1 vpcvolume.SnapshotManager) {
	fake.snapshotServiceMutex.Lock()
	defer fake.snapshotServiceMutex.Unlock()
	fake.SnapshotServiceStub = nil
	fake.snapshotServiceReturns = struct {
		result1 vpcvolume.SnapshotManager
	}{result1}
}

func (fake *RegionalAPI) SnapshotServiceReturnsOnCall(i int, result1 vpcvolume.SnapshotManager) {
	fake.snapshotServiceMutex.Lock()
	defer fake.snapshotServiceMutex.Unlock()
	fake.SnapshotServiceStub = nil
	if fake.snapshotServiceReturnsOnCall == nil {
		fake.snapshotServiceReturnsOnCall = make(map[int]struct {
			result1 vpcvolume.SnapshotManager
		})
	}
	fake.snapshotServiceReturnsOnCall[i] = struct {
		result1 vpcvolume.SnapshotManager
	}{result1}
}

func (fake *RegionalAPI) VolumeAttachService() instances.VolumeAttachManager {
	fake.volumeAttachServiceMutex.Lock()
	ret, specificReturn := fake.volumeAttachServiceReturnsOnCall[len(fake.volumeAttachServiceArgsForCall)]
	fake.volumeAttachServiceArgsForCall = append(fake.volumeAttachServiceArgsForCall, struct {
	}{})
	fake.recordInvocation("VolumeAttachService", []interface{}{})
	fake.volumeAttachServiceMutex.Unlock()
	if fake.VolumeAttachServiceStub != nil {
		return fake.VolumeAttachServiceStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.volumeAttachServiceReturns
	return fakeReturns.result1
}

func (fake *RegionalAPI) VolumeAttachServiceCallCount() int {
	fake.volumeAttachServiceMutex.RLock()
	defer fake.volumeAttachServiceMutex.RUnlock()
	return len(fake.volumeAttachServiceArgsForCall)
}

func (fake *RegionalAPI) VolumeAttachServiceCalls(stub func() instances.VolumeAttachManager) {
	fake.volumeAttachServiceMutex.Lock()
	defer fake.volumeAttachServiceMutex.Unlock()
	fake.VolumeAttachServiceStub = stub
}

func (fake *RegionalAPI) VolumeAttachServiceReturns(result1 instances.VolumeAttachManager) {
	fake.volumeAttachServiceMutex.Lock()
	defer fake.volumeAttachServiceMutex.Unlock()
	fake.VolumeAttachServiceStub = nil
	fake.volumeAttachServiceReturns = struct {
		result1 instances.VolumeAttachManager
	}{result1}
}

func (fake *RegionalAPI) VolumeAttachServiceReturnsOnCall(i int, result1 instances.VolumeAttachManager) {
	fake.volumeAttachServiceMutex.Lock()
	defer fake.volumeAttachServiceMutex.Unlock()
	fake.VolumeAttachServiceStub = nil
	if fake.volumeAttachServiceReturnsOnCall == nil {
		fake.volumeAttachServiceReturnsOnCall = make(map[int]struct {
			result1 instances.VolumeAttachManager
		})
	}
	fake.volumeAttachServiceReturnsOnCall[i] = struct {
		result1 instances.VolumeAttachManager
	}{result1}
}

func (fake *RegionalAPI) VolumeService() vpcvolume.VolumeManager {
	fake.volumeServiceMutex.Lock()
	ret, specificReturn := fake.volumeServiceReturnsOnCall[len(fake.volumeServiceArgsForCall)]
	fake.volumeServiceArgsForCall = append(fake.volumeServiceArgsForCall, struct {
	}{})
	fake.recordInvocation("VolumeService", []interface{}{})
	fake.volumeServiceMutex.Unlock()
	if fake.VolumeServiceStub != nil {
		return fake.VolumeServiceStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.volumeServiceReturns
	return fakeReturns.result1
}

func (fake *RegionalAPI) VolumeServiceCallCount() int {
	fake.volumeServiceMutex.RLock()
	defer fake.volumeServiceMutex.RUnlock()
	return len(fake.volumeServiceArgsForCall)
}

func (fake *RegionalAPI) VolumeServiceCalls(stub func() vpcvolume.VolumeManager) {
	fake.volumeServiceMutex.Lock()
	defer fake.volumeServiceMutex.Unlock()
	fake.VolumeServiceStub = stub
}

func (fake *RegionalAPI) VolumeServiceReturns(result1 vpcvolume.VolumeManager) {
	fake.volumeServiceMutex.Lock()
	defer fake.volumeServiceMutex.Unlock()
	fake.VolumeServiceStub = nil
	fake.volumeServiceReturns = struct {
		result1 vpcvolume.VolumeManager
	}{result1}
}

func (fake *RegionalAPI) VolumeServiceReturnsOnCall(i int, result1 vpcvolume.VolumeManager) {
	fake.volumeServiceMutex.Lock()
	defer fake.volumeServiceMutex.Unlock()
	fake.VolumeServiceStub = nil
	if fake.volumeServiceReturnsOnCall == nil {
		fake.volumeServiceReturnsOnCall = make(map[int]struct {
			result1 vpcvolume.VolumeManager
		})
	}
	fake.volumeServiceReturnsOnCall[i] = struct {
		result1 vpcvolume.VolumeManager
	}{result1}
}

func (fake *RegionalAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.iKSVolumeAttachServiceMutex.RLock()
	defer fake.iKSVolumeAttachServiceMutex.RUnlock()
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	fake.snapshotServiceMutex.RLock()
	defer fake.snapshotServiceMutex.RUnlock()
	fake.volumeAttachServiceMutex.RLock()
	defer fake.volumeAttachServiceMutex.RUnlock()
	fake.volumeServiceMutex.RLock()
	defer fake.volumeServiceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *RegionalAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ riaas.RegionalAPI = new(RegionalAPI)
